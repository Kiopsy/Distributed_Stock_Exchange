syntax = "proto3";

// python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. exchange.proto

package exchange;

service ExchangeService {
  // Connection functions
  rpc Alive (Empty) returns (ReviveInfo) {}
  rpc RequestHeartbeat (Empty) returns (HeartbeatResponse) {}

  // Voting functions
  rpc ProposeCommit (CommitRequest) returns (CommitVote) {}
  rpc SendVoteResult (CommitVote) returns (Empty) {}

  // Client (broker) functions
  rpc Ping (Empty) returns (Empty) {}

  // From institutions to exchange
  rpc SendOrder(OrderInfo) returns (OrderId) {}
  rpc CancelOrder(OrderId) returns (Result) {}
  rpc GetOrderList(Empty) returns (stream OrderInfo) {}

  // From exchange to institutions, brokers
  rpc OrderFill(Empty) returns (OrderInfo) {}
}

service BrokerService {
  // From user to broker
  rpc LogIn(UserInfo) returns (Result) {}
  rpc LogOut(Empty) returns (Result) {}
  rpc SendOrder(OrderInfo) returns (OrderId) {}
  rpc CancelOrder(OrderId) returns (Result) {}
  rpc GetBalance(UserId) returns (Balance) {}

  // From broker to user
  rpc OrderFill(Empty) returns (OrderInfo) {}
  // Add anything needed for paxos/replication?
}

message OrderId {
  int64 oid = 1;
}


message ReviveInfo {
  int64 primary_port = 1;
  bytes db_bytes = 2;
  bool updates = 3;
}

message HeartbeatResponse {
  int64 port = 1;
  bool primary = 2;
}

message CommitRequest {
  string commit = 1;
  int64 ballot_id = 2;
}

message CommitVote {
  bool approve = 1;
  string commit = 2;
  int64 ballot_id = 3;
}

message Result {
  bool result = 1;
}

message Empty {}

message Balance {
  int32 balance = 1;
}

message UserId {
  int32 uid = 1;
}

message OrderInfo {
  string ticker = 1;
  int32 quantity = 2;
  int32 price = 3;
  int32 uid = 4;
  enum OrderType {
    BID = 0;
    ASK = 1; 
  }
  OrderType type = 5;
}

message UserInfo {
  string username = 1;
  string password = 2;
}